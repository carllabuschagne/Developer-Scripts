admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901
static_resources:
  listeners:
    - name: listener_0_clients
      address:
        socket_address:
          address: 0.0.0.0
          # We will be using port 10001 for HTTPS
          # port_value: 10001 --> This can be used for Non-secure traffic (between Envoy and the cluster, i.e, the backed service)
          port_value: 10001
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                # Used to statistics and metrics purposes
                stat_prefix: ingress_http
                access_log:
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                http_filters:
                  - name: envoy.filters.http.router
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      # Look and match any domains
                      domains: ["*"]
                      # An array of routes we want to define routing for
                      routes:
                        - match:
                            # The pattern we look for in the address URL for do the routing
                            prefix: "/users"
                          route:
                            # How to re-write the request URL for the routing
                            prefix_rewrite: "/users"
                            # Where to send the request? to which cluster
                            # A cluster has an upstream, which is basically and application accepting requests from clients
                            cluster: users_cluster
                        - match:
                            # The pattern we look for in the address URL for do the routing
                            prefix: "/orders"
                          route:
                            # How to re-write the request URL for the routing
                            prefix_rewrite: "/orders"
                            # Where to send the request? to which cluster
                            # A cluster has an upstream, which is basically and application accepting requests from clients
                            cluster: orders_cluster
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                  - certificate_chain:
                      filename: "/etc/ssl/certs/https.crt"
                    private_key:
                      filename: "/etc/ssl/certs/key.pem"
  clusters:
    - name: users_cluster
      type: LOGICAL_DNS
      # Comment out the following line to test on v6 networks
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: users_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      # The URL to redirect the request to.
                      # This can be the service name from the docker-compose file, or a standard URL
                      address: usersapi
                      # This usually should be 80 - for non secure traffics
                      # This does not have to be the same as internal application ports in docker-compose, like 8081
                      port_value: 80
    - name: orders_cluster
      type: LOGICAL_DNS
      # Comment out the following line to test on v6 networks
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: orders_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      # The URL to redirect the request to.
                      # This can be the service name from the docker-compose file, or a standard URL
                      address: ordersapi
                      # This usually should be 80 - for non secure traffics
                      # This does not have to be the same as internal application ports in docker-compose, like 8081
                      port_value: 80